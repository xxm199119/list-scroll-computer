!function(Q){function F(U){if(C[U])return C[U].exports;var I=C[U]={i:U,l:!1,exports:{}};return Q[U].call(I.exports,I,I.exports,F),I.l=!0,I.exports}var C={};F.m=Q,F.c=C,F.i=function(Q){return Q},F.d=function(Q,C,U){F.o(Q,C)||Object.defineProperty(Q,C,{configurable:!1,enumerable:!0,get:U})},F.n=function(Q){var C=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return F.d(C,"a",C),C},F.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},F.p="",F(F.s=3)}([function(module,exports,__webpack_require__){eval('var map = {\n\t"./21771892.xml": 4\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error("Cannot find module \'" + req + "\'.");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 0;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvZGFubXUgbm9ucmVjdXJzaXZlIF5bXFxzXFxTXSskP2IwM2YiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbWFwID0ge1xuXHRcIi4vMjE3NzE4OTIueG1sXCI6IDRcbn07XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18od2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkpO1xufTtcbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0dmFyIGlkID0gbWFwW3JlcV07XG5cdGlmKCEoaWQgKyAxKSkgLy8gY2hlY2sgZm9yIG51bWJlciBvciBzdHJpbmdcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInLlwiKTtcblx0cmV0dXJuIGlkO1xufTtcbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSAwO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL2Rhbm11IG5vbnJlY3Vyc2l2ZSBeW1xcc1xcU10rJFxuLy8gbW9kdWxlIGlkID0gMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nfunction getDanmuXml() {\n    this.XMLHttpRequestObj = null;\n    this.outputCallback = function () {};\n    this.run();\n}\ngetDanmuXml.prototype = {\n    input: function input(XMLurlv) {\n        this.XMLHttpRequestObj.open("GET", XMLurlv, true);\n        this.XMLHttpRequestObj.send();\n    },\n    output: function output(XMLdata) {\n        this.outputCallback(XMLdata);\n    },\n    run: function run() {\n        this.getXMLHttpRequest();\n        this.eventInstall();\n    },\n    getXMLHttpRequest: function getXMLHttpRequest() {\n        var XMLHttpRequestObj = void 0;\n        if (window.XMLHttpRequest) {\n            //  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码\n            XMLHttpRequestObj = new XMLHttpRequest();\n        } else {\n            // IE6, IE5 浏览器执行代码\n            XMLHttpRequestObj = new ActiveXObject("Microsoft.XMLHTTP");\n        }\n        this.XMLHttpRequestObj = XMLHttpRequestObj;\n    },\n    eventInstall: function eventInstall() {\n        this.XMLHttpRequestObjReadystatechange();\n    },\n    XMLHttpRequestObjReadystatechange: function XMLHttpRequestObjReadystatechange() {\n        var that = this;\n        var requestReadystatechange = function requestReadystatechange() {\n            var XMLHttpRequestObj = that.XMLHttpRequestObj;\n            if (XMLHttpRequestObj.readyState == 4 && XMLHttpRequestObj.status == 200) {\n                var XMLdocument = XMLHttpRequestObj.responseXML.documentElement;\n                var XMLdata = that.XML2Json(XMLdocument);\n                that.output(XMLdata);\n            }\n        };\n        this.XMLHttpRequestObj.addEventListener("readystatechange", requestReadystatechange);\n    },\n    XML2Json: function XML2Json(XMLdocument) {\n        var dataDom = XMLdocument.getElementsByTagName("d");\n        var dataList = [];\n        var padNumber = function padNumber(num, fill) {\n            var len = (\'\' + num).length;\n            return Array(fill > len ? fill - len + 1 || 0 : 0).join(0) + num;\n        };\n        for (var i = 0; i < dataDom.length; i++) {\n            var data = {};\n            if (!dataDom[i].firstChild && /^\\s*$/.test(dataDom[i].firstChild.nodeValue)) return;\n            data.content = dataDom[i].firstChild.nodeValue;\n            var dataString = dataDom[i].getAttribute("p");\n            var dataArr = dataString.split(",");\n            data.currentTime = parseFloat(dataArr[0]);\n            if (parseInt(dataArr[1]) > 5) continue;\n            data.danmuMode = dataArr[1];\n            data.danmuSize = dataArr[2];\n            data.danmuColor = "#" + padNumber(parseInt(dataArr[3]).toString(16), 6);\n            var date = new Date();\n            date.setTime(parseInt(dataArr[4]) * 1000);\n            data.sendTime = padNumber(date.getMonth() + 1, 2) + "-" + padNumber(date.getDate(), 2) + " " + padNumber(date.getHours(), 2) + ":" + padNumber(date.getMinutes(), 2);\n            dataList.push(data);\n        }\n        dataList.sort(function (a, b) {\n            return parseFloat(a.currentTime) - parseFloat(b.currentTime);\n        });\n        return dataList;\n    }\n};\nfunction danmuPoolSlider(danmuPool) {\n    var danmuPoolSlider = danmuPool.getElementsByClassName("video-player-danmu-list-slider")[0];\n    this.danmuPoolSlider = danmuPoolSlider;\n    this.sliderFixedLength = undefined;\n    this.sliderButton = danmuPoolSlider.getElementsByClassName("video-player-danmu-list-slider-button")[0];\n    this.buttonNatrueHeight = undefined;\n    this.buttonCurrentHeight = undefined;\n    this.outputCallback = function () {};\n    this.run();\n}\ndanmuPoolSlider.prototype = {\n    output: function output(outputSignal) {\n        this.outputCallback(outputSignal);\n    },\n    input: function input(inputSignal) {\n        var buttonMoveLength = parseInt(this.computeButtonMoveLength());\n        var buttonTop = inputSignal * buttonMoveLength;\n        this.setButtonTop(buttonTop);\n    },\n    run: function run() {\n        this.eventInstall();\n    },\n    reset: function reset() {\n        this.setButtonTop(0);\n    },\n    showOrHideSlider: function showOrHideSlider(showOrHide) {\n        switch (showOrHide) {\n            case "show":\n                this.danmuPoolSlider.style.display = "";\n                break;\n            case "hide":\n                this.danmuPoolSlider.style.display = "none";\n                break;\n        }\n    },\n    setButtonCurrentHeight: function setButtonCurrentHeight(proportion) {\n        var sliderFixedLength = this.getSliderFixedLength();\n        var expectButtonHeight = proportion * sliderFixedLength;\n        var buttonNatrueHeight = this.getButtonNatrueHeight();\n        var buttonCurrentHeight = expectButtonHeight < buttonNatrueHeight ? buttonNatrueHeight : expectButtonHeight;\n        this.buttonCurrentHeight = buttonCurrentHeight;\n        this.sliderButton.style.height = buttonCurrentHeight + "px";\n    },\n    getSliderFixedLength: function getSliderFixedLength() {\n        if (!this.sliderFixedLength) this.sliderFixedLength = this.danmuPoolSlider.offsetHeight;\n        return this.sliderFixedLength;\n    },\n    getButtonNatrueHeight: function getButtonNatrueHeight() {\n        if (!this.buttonNatrueHeight) this.buttonNatrueHeight = this.sliderButton.offsetHeight;\n        return this.buttonNatrueHeight;\n    },\n\n    eventInstall: function eventInstall() {\n        this.sliderButtonDrag();\n    },\n    sliderButtonDrag: function sliderButtonDrag() {\n        var that = this;\n        var previousMousePosY = undefined;\n        var mouseRelativeButtonTop = undefined;\n        var mouseRelativeButtonBottom = undefined;\n        var bodyMousemove = function bodyMousemove(event) {\n            var e = event || window.event;\n            var currentMousePosY = parseInt(e.clientY.toFixed(0));\n            if (previousMousePosY !== 0 && !previousMousePosY) return;\n            var sliderTop = that.danmuPoolSlider.getBoundingClientRect().top;\n            var sliderBottom = that.danmuPoolSlider.getBoundingClientRect().bottom;\n            if (currentMousePosY - mouseRelativeButtonTop < sliderTop) {\n                currentMousePosY = sliderTop + mouseRelativeButtonTop;\n            }\n            if (currentMousePosY + mouseRelativeButtonBottom > sliderBottom) {\n                currentMousePosY = sliderBottom - mouseRelativeButtonBottom;\n            }\n            var mouseMoveLength = currentMousePosY - previousMousePosY;\n            var buttonTop = that.getButtonTop();\n            var buttonMaxMoveLength = that.computeButtonMoveLength();\n            var buttonMinTop = 0;\n            var buttonMaxTop = buttonMaxMoveLength;\n            if (buttonTop + mouseMoveLength < buttonMinTop) mouseMoveLength = -(buttonTop - buttonMinTop);else if (buttonMaxTop < buttonTop + mouseMoveLength) mouseMoveLength = buttonMaxTop - buttonTop;\n            var outputSignal = ((buttonTop + mouseMoveLength) / buttonMaxMoveLength).toFixed(3);\n            // console.log(outputSignal)\n            that.setButtonTop(outputSignal * buttonMaxMoveLength);\n            that.output(outputSignal);\n            previousMousePosY = currentMousePosY;\n        };\n        var mousedownCallback = function mousedownCallback(event) {\n            that.danmuPoolSlider.style.opacity = 1;\n            var e = event || window.event;\n            previousMousePosY = parseInt(e.clientY.toFixed(0));\n            var mouseDownButtonPosY = previousMousePosY;\n            var buttonBoundingTop = that.sliderButton.getBoundingClientRect().top;\n            mouseRelativeButtonTop = mouseDownButtonPosY - buttonBoundingTop;\n            var buttonBoundingBottom = that.sliderButton.getBoundingClientRect().bottom;\n            mouseRelativeButtonBottom = buttonBoundingBottom - mouseDownButtonPosY;\n\n            // buttonTop=parseInt(that.sliderButton.style.top?that.sliderButton.style.top:0)\n            document.body.removeEventListener("mousemove", bodyMousemove);\n            document.body.addEventListener("mousemove", bodyMousemove);\n        };\n        this.sliderButton.addEventListener("mousedown", mousedownCallback);\n        var mouseupCallback = function mouseupCallback(event) {\n            that.danmuPoolSlider.style.opacity = "";\n            document.body.removeEventListener("mousemove", bodyMousemove);\n        };\n        document.body.addEventListener("mouseup", mouseupCallback);\n    },\n    computeButtonMoveLength: function computeButtonMoveLength() {\n        var sliderFixedLength = this.getSliderFixedLength();\n        var buttonCurrentLength = this.getButtonCurrentHeight();\n        var buttonMoveLength = sliderFixedLength - buttonCurrentLength;\n        return buttonMoveLength;\n    },\n\n    getButtonCurrentHeight: function getButtonCurrentHeight(expectButtonHeight) {\n        return this.buttonCurrentHeight;\n    },\n    getButtonTop: function getButtonTop() {\n        return this.sliderButton.style.top ? parseFloat(this.sliderButton.style.top) : 0;\n    },\n    setButtonTop: function setButtonTop(top) {\n        this.sliderButton.style.top = top + "px";\n    }\n};\n\nfunction danmuPoolModule(videoPlayer) {\n    this.videoPlayer = videoPlayer;\n    var danmuPool = videoPlayer.getElementsByClassName("video-player-danmu-wrap")[0];\n    this.danmuPool = danmuPool;\n    this.danmuPoolScroll = danmuPool.getElementsByClassName("video-player-danmu-list-scroll")[0];\n    this.danmuPoolPos = danmuPool.getElementsByClassName("video-player-danmu-list-scroll-position")[0];\n    this.danmuPoolRows = danmuPool.getElementsByClassName("video-player-danmu-list-row");\n    this.scrollPos = 0;\n    this.danmuRowHeight = undefined;\n    this.danmuData = undefined;\n    this.cancelAnimationFrameID = null;\n    this.sliderControl = new danmuPoolSlider(danmuPool);\n    this.outputCallback = function () {};\n    this.readyCallbackList = [];\n    this.run();\n}\ndanmuPoolModule.prototype = {\n    input: function input(danmuData) {\n        this.reset();\n        this.danmuData = danmuData;\n        this.setSliderControlStyle();\n        this.fillDanmuPool();\n        this.ready("danmuPoolModule");\n    },\n    output: function output(outputCallback) {\n        this.outputCallback(outputCallback);\n    },\n    ready: function ready(readyState) {\n        for (var i = 0; i < this.readyCallbackList.length; i++) {\n            this.readyCallbackList[i](readyState);\n        }this.readyCallbackList = [];\n    },\n    run: function run() {\n        this.eventInstall();\n        this.controlBind();\n    },\n    reset: function reset() {\n        this.sliderControl.reset();\n        this.scrollPos = 0;\n        cancelAnimationFrame(this.cancelAnimationFrameID);\n    },\n    eventInstall: function eventInstall() {\n        this.danmuPoolScrollMousewheel();\n    },\n    danmuPoolScrollMousewheel: function danmuPoolScrollMousewheel() {\n        var that = this;\n        var mousewheelCallback = function mousewheelCallback(event) {\n            var e = event || window.event;\n            e.preventDefault();\n            var mouseWheelData = void 0;\n            if (e.detail) mouseWheelData = -e.detail * 40;else if (e.wheelDelta) mouseWheelData = e.wheelDelta;\n            var danmuRowHeight = that.getDanmuRowHeight();\n            var addPosTop = void 0;\n            if (mouseWheelData < 0) addPosTop = -danmuRowHeight * 2;else if (mouseWheelData > 0) addPosTop = danmuRowHeight * 2;else addPosTop = 0;\n            // console.log(addPosTop)\n            that.output(addPosTop);\n            that.drawScrollWheel(addPosTop);\n        };\n        this.addMousewheelListener(this.danmuPoolScroll, mousewheelCallback);\n    },\n    addMousewheelListener: function addMousewheelListener(el, callback) {\n        el.addEventListener("DOMMouseScroll", callback);\n        el.addEventListener("mousewheel", callback);\n    },\n    removeMousewheelListener: function removeMousewheelListener(el, callback) {\n        el.removeEventListener("DOMMouseScroll", callback);\n        el.removeEventListener("mousewheel", callback);\n    },\n    controlBind: function controlBind() {\n        var that = this;\n        var controlOutputCallback = function controlOutputCallback(outputSignal) {\n            var poolScreenHeight = that.getDanmuPoolScreenHeight();\n            var poolScrollHeight = that.getDanmuPoolScrollHeight();\n            var addPosTop = -(poolScrollHeight - poolScreenHeight) * outputSignal - that.getAbsoluteScrollTop();\n            // console.log(addPosTop)\n            that.drawScrollWheel(addPosTop);\n        };\n        this.sliderControl.outputCallback = controlOutputCallback;\n        var moduleOutputCallback = function moduleOutputCallback(addPosTop) {\n            var absoluteScrollTop = that.getAbsoluteScrollTop();\n            var poolScreenHeight = that.getDanmuPoolScreenHeight();\n            var poolScrollHeight = that.getDanmuPoolScrollHeight();\n            var inputSignal = parseFloat((-absoluteScrollTop / (poolScrollHeight - poolScreenHeight)).toFixed(3));\n\n            that.sliderControl.input(inputSignal);\n        };\n        this.outputCallback = moduleOutputCallback;\n    },\n    drawScrollWheel: function drawScrollWheel(addPosTop) {\n        if (!addPosTop) return;\n        cancelAnimationFrame(this.cancelAnimationFrameID);\n        var frameNum = 6;\n        var addPosTopSlice = addPosTop / frameNum;\n        this.drawScrollWheelFrame(addPosTopSlice, frameNum);\n    },\n    drawScrollWheelFrame: function drawScrollWheelFrame(addPosTopSlice, frameNum) {\n        if (frameNum == 0) return;\n        this.setAbsoluteScrollTop(addPosTopSlice);\n        this.computeScrollTop();\n        this.fillDanmuPool();\n        var that = this;\n        this.cancelAnimationFrameID = requestAnimationFrame(function () {\n            that.drawScrollWheelFrame(addPosTopSlice, --frameNum);\n        });\n    },\n    setAbsoluteScrollTop: function setAbsoluteScrollTop(addPosTop) {\n        if (this.scrollPos + addPosTop > 0) {\n            this.scrollPos = 0;\n            return;\n        }\n        var scrollHeight = this.getDanmuPoolScrollHeight();\n        var danmuRowHeight = this.getDanmuRowHeight();\n        var screenHeight = this.getDanmuPoolScreenHeight();\n        if (scrollHeight <= screenHeight) return 0;\n        var minTop = -(scrollHeight - screenHeight);\n        if (this.scrollPos + addPosTop < minTop) {\n            this.scrollPos = minTop;\n            return;\n        }\n        this.scrollPos += addPosTop;\n    },\n    getDanmuPoolScrollHeight: function getDanmuPoolScrollHeight() {\n        return this.danmuData.length * this.getDanmuRowHeight();\n    },\n    getDanmuRowHeight: function getDanmuRowHeight() {\n        if (this.danmuRowHeight === undefined) this.danmuRowHeight = this.danmuPoolRows[0].offsetHeight;\n        return this.danmuRowHeight;\n    },\n    getDanmuPoolScreenHeight: function getDanmuPoolScreenHeight() {\n        return this.danmuPoolScroll.offsetHeight;\n    },\n    computeScrollTop: function computeScrollTop() {\n        var absoluteTop = this.getAbsoluteScrollTop();\n        var relativeTop = this.getRelativeScrollTop(absoluteTop);\n        this.setDanmuPoolPosTop(relativeTop);\n    },\n    getAbsoluteScrollTop: function getAbsoluteScrollTop() {\n        return this.scrollPos;\n    },\n    getRelativeScrollTop: function getRelativeScrollTop(absolutePosTop) {\n        var danmuRowHeight = this.getDanmuRowHeight();\n        if (absolutePosTop % danmuRowHeight == 0) {\n            return 0;\n        }\n        // if((absolutePosTop%danmuRowHeight)==0){\n        //     if(absolutePosTop<0)\n        //         return -danmuRowHeight\n        //     else\n        //         return 0\n        // }\n        return absolutePosTop % danmuRowHeight > 0 ? -(danmuRowHeight - absolutePosTop % danmuRowHeight) : absolutePosTop % danmuRowHeight;\n    },\n\n    setDanmuPoolPosTop: function setDanmuPoolPosTop(posTop, mouseWheelDirection) {\n        var previousPosTop = this.getDanmuPoolPosTop();\n        this.danmuPoolPos.style.top = posTop + "px";\n    },\n    getDanmuPoolPosTop: function getDanmuPoolPosTop() {\n        return parseFloat(this.danmuPoolPos.style.top);\n    },\n    fillDanmuPool: function fillDanmuPool() {\n        var absoluteTop = this.getAbsoluteScrollTop();\n        var posTop = this.getDanmuPoolPosTop();\n        var danmuRowHeight = this.getDanmuRowHeight();\n        var danmuDataIndex = void 0;\n        // if(posTop==-danmuRowHeight)\n        //     danmuDataIndex=absoluteTop/danmuRowHeight+1\n        // else if(posTop==0)\n        //     danmuDataIndex=absoluteTop/danmuRowHeight\n        // else\n        //     danmuDataIndex=parseInt(absoluteTop/danmuRowHeight)+1\n        // danmuDataIndex=-danmuDataIndex\n\n        if (posTop == 0) danmuDataIndex = absoluteTop / danmuRowHeight;else danmuDataIndex = Math.ceil(absoluteTop / danmuRowHeight);\n        danmuDataIndex = -danmuDataIndex;\n        // danmuDataIndex=-parseInt(absoluteTop/danmuRowHeight)\n        // let danmuDataIndex=(absoluteTop/danmuRowHeight==0)?absoluteTop/danmuRowHeight:(Math.floor(absoluteTop/danmuRowHeight)-1)\n        if (!this.danmuData) return;\n        var danmuData = this.danmuData;\n        var danmuPoolRows = this.danmuPoolRows;\n        var documentFragment = document.createDocumentFragment();\n        for (var i = 0, l = danmuDataIndex; i < danmuPoolRows.length; i++, l++) {\n            var thisRow = danmuPoolRows[i];\n            thisRow = thisRow.cloneNode(true);\n            documentFragment.appendChild(thisRow);\n            if (l >= danmuData.length || l < 0) {\n                thisRow.style.opacity = 0;\n                continue;\n            } else thisRow.style.opacity = 1;\n            var currentTimeEl = thisRow.getElementsByClassName("video-player-danmu-list-row-time")[0];\n            var sendDateEl = thisRow.getElementsByClassName("video-player-danmu-list-row-date")[0];\n            var contentEl = thisRow.getElementsByClassName("video-player-danmu-list-row-content")[0];\n            var thisData = danmuData[l];\n            if (!thisData) continue;\n            var currentTimeText = this.timeToText(thisData.currentTime);\n            var sendDateText = thisData.sendTime;\n            var contentText = thisData.content;\n            this.textChildVoluation(currentTimeEl, currentTimeText);\n            this.textChildVoluation(sendDateEl, sendDateText);\n            this.textChildVoluation(contentEl, contentText);\n        }\n        this.danmuPoolPos.innerHTML = "";\n        this.danmuPoolPos.appendChild(documentFragment);\n    },\n    timeToText: function timeToText(seconds) {\n        var padNumber = function padNumber(num, fill) {\n            var len = (\'\' + num).length;\n            return Array(fill > len ? fill - len + 1 || 0 : 0).join(0) + num;\n        };\n        var minutesText = padNumber(parseInt(seconds / 60), 2);\n        var secondsText = padNumber(parseInt(seconds % 60), 2);\n        return minutesText + ":" + secondsText;\n    },\n    textChildVoluation: function textChildVoluation(parentNode, textValue) {\n        if (parentNode.lastChild && parentNode.lastChild.nodeType == 3) parentNode.lastChild.nodeValue = textValue;else {\n            var newTextNode = document.createTextNode(textValue);\n            parentNode.appendChild(newTextNode);\n        }\n    },\n    setSliderControlStyle: function setSliderControlStyle() {\n        this.setSliderShowOrNot();\n        this.setSliderButtonHeight();\n    },\n    setSliderShowOrNot: function setSliderShowOrNot() {\n        var danmuDataNum = this.danmuData.length;\n        var danmuRowNum = this.danmuPoolRows.length - 1;\n        var showOrNot = void 0;\n        if (danmuDataNum <= danmuRowNum) showOrNot = "hide";else showOrNot = "show";\n        this.sliderControl.showOrHideSlider(showOrNot);\n    },\n    setSliderButtonHeight: function setSliderButtonHeight() {\n        var screenHeight = this.danmuPoolScroll.offsetHeight;\n        var scroolHeight = this.getDanmuPoolScrollHeight();\n        var proportion = screenHeight / scroolHeight;\n        this.sliderControl.setButtonCurrentHeight(proportion);\n    }\n};\nvar getDanmuXmlObj = new getDanmuXml();\ngetDanmuXmlObj.outputCallback = function (danmuData) {\n    new danmuPoolModule(document.getElementById("video-page")).input(danmuData);\n};\ngetDanmuXmlObj.input("21771892.xml");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')},function(module,exports){eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvY3NzL2Rhbm11X3BsYXllci5jc3M/ZTE1YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9jc3MvZGFubXVfcGxheWVyLmNzc1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\n// import Vue from "vue"\n// import vueIndex from "./vue-index.vue"\n// require.context("./videos",false,/^[\\s\\S]+$/)\n// require.context("./images",false,/^[\\s\\S]+$/)\n\n__webpack_require__(0);\n__webpack_require__(2);\n__webpack_require__(1);\n\n// new Vue({\n//     el:"#app",\n\n//     components:{\n//         "vue-index":vueIndex\n//     }\n// })//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbWFpbi5qcz82YTRiIl0sIm5hbWVzIjpbInJlcXVpcmUiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBQUEsQ0FBUyxDQUFUO0FBQ0EsbUJBQUFBLENBQVMsQ0FBVDs7QUFJQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbXBvcnQgVnVlIGZyb20gXCJ2dWVcIlxyXG4vLyBpbXBvcnQgdnVlSW5kZXggZnJvbSBcIi4vdnVlLWluZGV4LnZ1ZVwiXHJcbi8vIHJlcXVpcmUuY29udGV4dChcIi4vdmlkZW9zXCIsZmFsc2UsL15bXFxzXFxTXSskLylcclxuLy8gcmVxdWlyZS5jb250ZXh0KFwiLi9pbWFnZXNcIixmYWxzZSwvXltcXHNcXFNdKyQvKVxyXG5cclxucmVxdWlyZS5jb250ZXh0KFwiLi9kYW5tdVwiLGZhbHNlLC9eW1xcc1xcU10rJC8pXHJcbnJlcXVpcmUgKFwiLi9jc3MvZGFubXVfcGxheWVyLmNzc1wiKVxyXG5yZXF1aXJlIChcIi4vSnMvZGFubXVfcGxheWVyLmpzXCIpXHJcblxyXG5cclxuXHJcbi8vIG5ldyBWdWUoe1xyXG4vLyAgICAgZWw6XCIjYXBwXCIsXHJcbiAgICBcclxuLy8gICAgIGNvbXBvbmVudHM6e1xyXG4vLyAgICAgICAgIFwidnVlLWluZGV4XCI6dnVlSW5kZXhcclxuLy8gICAgIH1cclxuLy8gfSlcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvbWFpbi5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "21771892.xml";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvZGFubXUvMjE3NzE4OTIueG1sPzY0ODUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjIxNzcxODkyLnhtbFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL2Rhbm11LzIxNzcxODkyLnhtbFxuLy8gbW9kdWxlIGlkID0gNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n')}]);